// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Swaperoo_PE01_Grp9.Server.Data;

#nullable disable

namespace Swaperoo_PE01_Grp9.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2bf0d5d5-7691-418f-b2f7-266c7467a0b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "254a7add-4a42-4d9f-bf58-59cf2e039881",
                            Email = "frankofoedu@blazor.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANKOFOEDU@BLAZOR.COM",
                            NormalizedUserName = "FRANKOFOEDU@BLAZOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKnAAEzbFHWR+1IGAvNeyMW1VQJP8uCbwnwAqz8CX0UojUlZy/15M8lSjg3htx2WOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa897b83-772e-4f73-b2c6-5b7bf9e62344",
                            TwoFactorEnabled = false,
                            UserName = "frankofoedu@blazor.com"
                        },
                        new
                        {
                            Id = "2bf0d5d5-7691-418f-b2f7-266c7467a0b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2948c75-770e-44d1-a341-81bff0abf125",
                            Email = "john@blazor.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@BLAZOR.COM",
                            NormalizedUserName = "JOHN@BLAZOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKNZlnNFQrjQoWIGC+Dg9evpq/MXIgJ245JSH8e20a3M1z/pSMbLv9ibJsxjrD+hAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ed71b24-f385-4609-9754-418621a90ad1",
                            TwoFactorEnabled = false,
                            UserName = "john@blazor.com"
                        },
                        new
                        {
                            Id = "2bf0d5d5-7691-418f-b2f7-266c7467a0b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ecc8447-eed6-4bae-b932-864fb3cf6633",
                            Email = "alice@blazor.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE@BLAZOR.COM",
                            NormalizedUserName = "ALICE@BLAZOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDqaUvJLYOWDDHIHVxtgYssRcfh+o4WWWFXFoTwwxqdxPkufkgUTQ1mDzFrub+SG2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c384c588-b1ec-42c1-a8cf-c113754a5f43",
                            TwoFactorEnabled = false,
                            UserName = "alice@blazor.com"
                        });
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fashion"
                        });
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 1, 22, 20, 12, 17, 650, DateTimeKind.Local).AddTicks(271),
                            Name = "First Chat",
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            DateCreated = new DateTime(2024, 1, 22, 20, 12, 17, 650, DateTimeKind.Local).AddTicks(714),
                            MessageContent = "Fashion",
                            ReceiverId = "2bf0d5d5 - 7691 - 418f - b2f7 - 266c7467a0b1",
                            SenderId = "2bf0d5d5-7691-418f-b2f7-266c7467a0b0"
                        });
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("imagepath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 1, 22, 20, 12, 17, 650, DateTimeKind.Local).AddTicks(1147),
                            Description = "Description",
                            Name = "Nvidea GTX 2080",
                            SubCategoryId = 1,
                            UserId = "2bf0d5d5-7691-418f-b2f7-266c7467a0b0",
                            imagepath = "https://images.nvidia.com/aem-dam/Solutions/geforce/news/geforce-rtx-graphics-cards/geforce-rtx-2080-technical-photography-front.png",
                            price = 1000.0,
                            status = "ongoing"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 1, 22, 20, 12, 17, 650, DateTimeKind.Local).AddTicks(1154),
                            Description = "Description",
                            Name = "Intel i9",
                            SubCategoryId = 1,
                            UserId = "2bf0d5d5-7691-418f-b2f7-266c7467a0b0",
                            price = 500.0,
                            status = "sold"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 1, 22, 20, 12, 17, 650, DateTimeKind.Local).AddTicks(1156),
                            Description = "Brand new",
                            Name = "Air jordon 12",
                            SubCategoryId = 1,
                            UserId = "2bf0d5d5-7691-418f-b2f7-266c7467a0b0",
                            price = 500.0,
                            status = "ongoing"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2024, 1, 22, 20, 12, 17, 650, DateTimeKind.Local).AddTicks(1157),
                            Description = "Brand new",
                            Name = "Computer",
                            SubCategoryId = 1,
                            UserId = "2bf0d5d5 - 7691 - 418f - b2f7 - 266c7467a0b1",
                            price = 800.0,
                            status = "ongoing"
                        });
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("OfferPrice")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SellDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OfferPrice = 400.0,
                            PurchaseProductId = 2,
                            SellDate = new DateTime(2024, 1, 22, 20, 12, 17, 650, DateTimeKind.Local).AddTicks(1785),
                            UserId = "2bf0d5d5 - 7691 - 418f - b2f7 - 266c7467a0b1"
                        });
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int?>("SwapId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SwapId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 1, 22, 20, 12, 17, 650, DateTimeKind.Local).AddTicks(2070),
                            Description = "blahblah",
                            PurchaseId = 1,
                            RatingValue = 4,
                            UserId = "2bf0d5d5-7691-418f-b2f7-266c7467a0b0"
                        });
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReportedProductId")
                        .HasColumnType("int");

                    b.Property<string>("ReportedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReportedProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 1, 22, 20, 12, 17, 650, DateTimeKind.Local).AddTicks(2415),
                            Description = "Description",
                            ReportType = "site",
                            ReporterUserId = "2bf0d5d5-7691-418f-b2f7-266c7467a0b0",
                            status = "unsolved"
                        });
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Shirt"
                        });
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Swap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferItemID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SellertId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SwapDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SwapProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Swaps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyerId = "2bf0d5d5-7691-418f-b2f7-266c7467a0b0",
                            OfferItemID = 3,
                            SellertId = "2bf0d5d5 - 7691 - 418f - b2f7 - 266c7467a0b1",
                            SwapDate = new DateTime(2024, 1, 22, 20, 12, 17, 650, DateTimeKind.Local).AddTicks(3441),
                            SwapProductId = 4
                        });
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "2bf0d5d5-7691-418f-b2f7-266c7467a0b0",
                            Description = "empty",
                            Email = "frankofoedu@blazor.com",
                            Name = "Frank Ofoedu",
                            Region = "North"
                        },
                        new
                        {
                            Id = "2bf0d5d5 - 7691 - 418f - b2f7 - 266c7467a0b1",
                            Description = "empty",
                            Email = "john@blazor.com",
                            Name = "John",
                            Region = "South"
                        },
                        new
                        {
                            Id = "2bf0d5d5 - 7691 - 418f - b2f7 - 266c7467a0b2",
                            Description = "empty",
                            Email = "alice@blazor.com",
                            Name = "Alice",
                            Region = "West"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Swaperoo_PE01_Grp9.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Swaperoo_PE01_Grp9.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swaperoo_PE01_Grp9.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Swaperoo_PE01_Grp9.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Chat", b =>
                {
                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.Product", "Product")
                        .WithMany("Chats")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Message", b =>
                {
                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.Chat", "Chat")
                        .WithMany("Message")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Product", b =>
                {
                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Purchase", b =>
                {
                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.Product", "Product")
                        .WithMany("Purchases")
                        .HasForeignKey("ProductId");

                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.User", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Rating", b =>
                {
                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.Purchase", "Purchase")
                        .WithMany("Ratings")
                        .HasForeignKey("PurchaseId");

                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.Swap", "Swap")
                        .WithMany("Ratings")
                        .HasForeignKey("SwapId");

                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("Swap");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Report", b =>
                {
                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.Product", "ReportedProduct")
                        .WithMany("Reports")
                        .HasForeignKey("ReportedProductId");

                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId");

                    b.Navigation("ReportedProduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.SubCategory", b =>
                {
                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Swap", b =>
                {
                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.Product", "Product")
                        .WithMany("Swaps")
                        .HasForeignKey("ProductId");

                    b.HasOne("Swaperoo_PE01_Grp9.Shared.Domain.User", "User")
                        .WithMany("Swaps")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Chat", b =>
                {
                    b.Navigation("Message");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Product", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Purchases");

                    b.Navigation("Reports");

                    b.Navigation("Swaps");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Purchase", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.Swap", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Swaperoo_PE01_Grp9.Shared.Domain.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Products");

                    b.Navigation("Purchases");

                    b.Navigation("Ratings");

                    b.Navigation("Reports");

                    b.Navigation("Swaps");
                });
#pragma warning restore 612, 618
        }
    }
}
