@page "/profile/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Profile</PageTitle>
<head>
    <link href="css/landing.css" rel="stylesheet" />
    <link href="css/Profile.css" rel="stylesheet" />
</head>

<body>
    <div class="profilearea">
        <div class="profiletop">
            @user.Name's store
        </div>
        
        <div class="profileinformation">
            <div class="profileinformation-left">
                <div class="image-container">
                    <img src="@user.profilepicture" alt="https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png" class="profilepic">
                </div>
                <div class="rating">
                    Rating
                </div>
            </div>
            <div class="profileinformation-center">
                <div>About Myself</div>
                <div>@user.Description</div>
            </div>
            <div class="profileinformation-right">
                @if(id == user.Id)
                {
                    <a @onclick="TogglePopUp">
                        <img class="profileoption" src="https://cdn-icons-png.flaticon.com/512/7606/7606176.png" />
                    </a>
                }
                else
                {
                    Console.WriteLine("NOT U");
                }

                
            </div>
            
        </div>
    </div>

    <div class="Featured_grid">
        @if (products != null)
        {
            @foreach (var product in products)
            {
                @if (product.UserId == user.Id)
                {
                    <a href="/product/listed/@product.Id" class="Featured">
                        <div class="product_imgrow">
                        <img class="product_img" src="@product.imagepath">
                    </div>

                    <div class="product_info">
                        <p class="product_name">@product.Name</p>
                        <p class="product_price">$@product.price</p>
                    </div>
                    </a>
                }
            }
        }
    </div>

    <div class="popup" style="top: @popupTop; opacity: @popupOpacity; transform: @popupTransform">
            <div class="close-btn" @onclick="ClosePopup">&times;</div>
            <div class="sellform">
                <h2>Edit Profile</h2>
                <div class="sell-form-element">
                    <label for="name">Name</label>
                    <input type="text" id="name" placeholder="@user.Name" @bind="name">
                </div>
                <div class="sell-form-element">
                    <label for="region">Region</label>
                    <select id="region" @bind="region">
                        <option value="North">North</option>
                        <option value="South">South</option>
                        <option value="East">East</option>
                        <option value="West">West</option>
                    </select>
                </div>
                <div class="sell-form-element">
                    <label for="email">Email</label>
                    <input type="email" id="email" placeholder="@user.Email" @bind="email">
                </div>
                <div class="sell-form-element">
                    <label for="description">Description</label>
                    <textarea id="description" placeholder="@user.Description" @bind="description"></textarea>
                </div>
                <div class="sell-form-element">
                    <label for="profilepicture">Profile Picture</label>
                    <input type="text" id="profilepicture" placeholder="@user.profilepicture" @bind="profilepicture">
                </div>
                <div class="sell-form-element">
                    <button @onclick="editprofile">Edit Profile</button>
                </div>
            </div>
    </div>
    
</body>

@code {
    [Parameter] public int id { get; set; }

    private List<Product>? products;
    User? user = new User();
    private List<User>? users;

    private string name;
    private string region;
    private string email;
    private string description;
    private string profilepicture;

    //popup---------------------
    private bool isPopupVisible = false;

    private string popupTop = "-150%";
    private string popupOpacity = "0";
    private string popupTransform = "translate(-50%, -50%) scale(1.25)";   
    //--------------------------------

    protected override async Task OnInitializedAsync()
    {
        products = await _client.GetFromJsonAsync<List<Product>>(Endpoints.ProductsEndpoint);
        user = await _client.GetFromJsonAsync<User>($"{Endpoints.UsersEndpoint}/{id}");
        users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");

        name = user.Name;
        region = user.Region;
        email = user.Email;
        description = user.Description;
        profilepicture = user.profilepicture;
    }

    protected override async Task OnParametersSetAsync()
    {
        // Call the base implementation
        await base.OnParametersSetAsync();

        // Trigger a refresh by calling OnInitializedAsync
        await OnInitializedAsync();
    }


    private void TogglePopUp()
    {
        isPopupVisible = !isPopupVisible;

        // Set styles based on popup visibility
        popupTop = isPopupVisible ? "50%" : "-150%";
        popupOpacity = isPopupVisible ? "1" : "0";
        popupTransform = isPopupVisible ? "translate(-50%, -50%) scale(1)" : "translate(-50%, -50%) scale(1.25)";
    }



    private void ClosePopup()
    {
        isPopupVisible = false;

        // Reset styles to hide the popup
        popupTop = "-150%";
        popupOpacity = "0";
        popupTransform = "translate(-50%, -50%) scale(1.25)";
    }
    private void editprofile()
    {
        var editeduser = new User()
        {
            Id = user.Id,
            UserId = user.UserId,
            Name = name,
            Region = region,
            Email = email,
            Description = description,
            profilepicture = profilepicture,
            Role = user.Role,
            DateCreated = user.DateCreated,
            DateUpdated = DateTime.Now
        };


    }
}
