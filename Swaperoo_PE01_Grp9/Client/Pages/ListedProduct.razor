@page "/product/listed/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Product</PageTitle>
<head>
    <link href="css/landing.css" rel="stylesheet" />
    <link href="css/ListedProduct.css" rel="stylesheet" />
</head>

<body>
    @if (product != null)
    {
        <div class="productimage">
            <img src="@product.imagepath" class="productimagesrc"/>
        </div>
        <div class="productinfo">
            <div class="productname">
             @product.Name
         </div>
         <div class="productprice">
             S$@product.price
         </div>
        </div>
        <div class="seller">
            <div class="sellerinfo">
                <div class="sellerimg">
                    <img src="@product.User?.profilepicture" class="sellerprofileimg" />
                </div>
                <div class="sellername">
                    @product.User?.Name
                </div>
            </div>
            <div class="transactbutton">
                <button class="sellbutton" @onclick="ToggleSellPopUp">Sell</button>
                <button class="swapbutton">Swap</button>
            </div>
        </div>
        <div class="popup" style="top: @popupTop; opacity: @popupOpacity; transform: @popupTransform">
            <div class="close-btn" @onclick="ClosePopup">&times;</div>
            <div class="sellform">
                <h2>Create Purchase Offer</h2>
                <h3><img src="@product.imagepath" class="productofferimage"> @product.Name</h3>
                <div class="sell-form-element">
                    <label for="offer">Your offer</label>
                    <input type="text" id="offer" placeholder="@product.price">
                </div>
                <div class="sell-form-element">
                    <button>Make Offer</button>
                </div>
            </div>
        </div>

        <div class="popup" style="top: @popupTop; opacity: @popupOpacity; transform: @popupTransform">
            <div class="close-btn" @onclick="ClosePopup">&times;</div>
            <div class="sellform">
                <h2>Create Swap Offer</h2>
                <h3><img src="@product.imagepath" class="productofferimage"> @product.Name</h3>
                <div class="sell-form-element">
                    <label for="offer">Your offer</label>
                    <select id="swapoffer">
                        @foreach (var p in products)
                        {
                            if(p.UserId == userId)
                            {
                                <option value="@p.Id">@p.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="sell-form-element">
                    <button>Make Offer</button>
                </div>
            </div>
        </div>

     }
</body>



@code {
    [Parameter] public int id { get; set; }
    Product? product = new Product();
    private List<Product>? products;

    private List<User>? users;
    private string username;
    private string userId;

    private bool isPopupVisible = false;
    private string popupTop = "-150%";
    private string popupOpacity = "0";
    private string popupTransform = "translate(-50%, -50%) scale(1.25)";

    protected override async Task OnInitializedAsync()
    {
        products = await _client.GetFromJsonAsync<List<Product>>(Endpoints.ProductsEndpoint);
        product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/Detail/{id}");
        users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        Console.WriteLine($"Username: {user.Identity.Name}");
        // Get the userId from the user's identity
        username = user.Identity.Name;

        @foreach (var i in users)
        {
            if (i.Email == username)
            {
                userId = i.Id;
            }
        }
        Console.WriteLine($"User ID: {userId}");
    }

    private void ToggleSellPopUp()
    {
        isPopupVisible = !isPopupVisible;

        // Set styles based on popup visibility
        popupTop = isPopupVisible ? "50%" : "-150%";
        popupOpacity = isPopupVisible ? "1" : "0";
        popupTransform = isPopupVisible ? "translate(-50%, -50%) scale(1)" : "translate(-50%, -50%) scale(1.25)";
    }

    private void ClosePopup()
    {
        isPopupVisible = false;

        // Reset styles to hide the popup
        popupTop = "-150%";
        popupOpacity = "0";
        popupTransform = "translate(-50%, -50%) scale(1.25)";
    }
}
