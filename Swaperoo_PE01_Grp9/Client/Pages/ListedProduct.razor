@page "/product/listed/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpInterceptorService _interceptor

<PageTitle>Product</PageTitle>
<head>
    <link href="css/landing.css" rel="stylesheet" />
    <link href="css/ListedProduct.css" rel="stylesheet" />
</head>

<body>
    @if (product != null)
    {
        <div class="productimage">
            <img src="@product.imagepath" class="productimagesrc"/>
        </div>
        <div class="productinfo">
            <div class="productname">
                @product.Name
            </div>
            <div class="productprice">
                S$@product.price
            </div>
            <div class="productdescription">
                @product.Description
            </div>
        </div>
        <div class="seller">
            <div class="sellerinfo">
                <div class="sellerimg">
                    <img src="@product.User?.profilepicture" class="sellerprofileimg" />
                </div>
                <div class="sellername">
                    @product.User?.Name
                </div>
            </div>
            <div class="transactbutton">
                <button class="sellbutton" @onclick="ToggleSellPopUp">Buy</button>
                <button class="swapbutton" @onclick="ToggleSwapPopUp">Swap</button>
            </div>
        </div>

        <div class="popup" style="top: @sellpopupTop; opacity: @sellpopupOpacity; transform: @sellpopupTransform">
            <div class="close-btn" @onclick="CloseSellPopup">&times;</div>
            <div class="sellform">
                <h2>Create Purchase Offer</h2>
                <h3><img src="@product.imagepath" class="productofferimage"> @product.Name</h3>
                <div class="sell-form-element">
                    <label for="offer">Your offer</label>
                    <input type="text" id="offer" placeholder="@product.price"  @bind="offervalue">
                </div>
                <div class="sell-form-element">
                    <button @onclick="makepurchase">Make Offer</button>
                </div>
            </div>
        </div>

        <div class="popup" style="top: @swappopupTop; opacity: @swappopupOpacity; transform: @swappopupTransform">
            <div class="close-btn" @onclick="CloseSwapPopup">&times;</div>
            <div class="sellform">
                <h2>Create Swap Offer</h2>
                <h3><img src="@product.imagepath" class="productofferimage"> @product.Name</h3>
                <div class="sell-form-element">
                    <label for="offer">Your offer</label>
                    <select id="swapoffer" @bind="offerProductId">
                        @if (products != null)
                        {
                            <option value="" disabled selected>Select an option</option>
                            @foreach (var p in products)
                            {
                                if (p.UserId == userId && p.status != "sold")
                                {  
                                    <option value="@p.Id">@p.Name</option>
                                }
                            }
                        }

                    </select>
                </div>
                <div class="sell-form-element">
                    <button @onclick="makeswap">Make Offer</button>
                </div>
            </div>
        </div>

    }
</body>



@code {
    [Parameter] public int id { get; set; }
    Product? product = new Product();
    private List<Product>? products;

    private List<User>? users;
    private string username;
    private int userId;

    private double offervalue;
    private int offerProductId;

    //popup---------------------
    private bool isSellPopupVisible = false;
    private bool isSwapPopupVisible = false;

    private string sellpopupTop = "-150%";
    private string sellpopupOpacity = "0";
    private string sellpopupTransform = "translate(-50%, -50%) scale(1.25)";

    private string swappopupTop = "-150%";
    private string swappopupOpacity = "0";
    private string swappopupTransform = "translate(-50%, -50%) scale(1.25)";
    //--------------------------------

    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        products = await _client.GetFromJsonAsync<List<Product>>(Endpoints.ProductsEndpoint);
        product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/Detail/{id}");
        users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");


        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        Console.WriteLine($"Username: {user.Identity.Name}");
        // Get the userId from the user's identity
        username = user.Identity.Name;

        @foreach (var i in users)
        {
            if (i.Email == username)
            {
                userId = i.Id;
            }
        }
        Console.WriteLine($"User ID: {userId}");

        offervalue = product.price;

    }

    private void ToggleSellPopUp()
    {
        Console.WriteLine("ToggleSellPopUp");
        isSellPopupVisible = !isSellPopupVisible;

        // Set styles based on popup visibility
        sellpopupTop = isSellPopupVisible ? "50%" : "-150%";
        sellpopupOpacity = isSellPopupVisible ? "1" : "0";
        sellpopupTransform = isSellPopupVisible ? "translate(-50%, -50%) scale(1)" : "translate(-50%, -50%) scale(1.25)";
        CloseSwapPopup();
    }
    private void ToggleSwapPopUp()
    {
        Console.WriteLine("ToggleSwapPopUp");
        isSwapPopupVisible = !isSwapPopupVisible;

        // Set styles based on popup visibility
        swappopupTop = isSwapPopupVisible ? "50%" : "-150%";
        swappopupOpacity = isSwapPopupVisible ? "1" : "0";
        swappopupTransform = isSwapPopupVisible ? "translate(-50%, -50%) scale(1)" : "translate(-50%, -50%) scale(1.25)";
        CloseSellPopup();
    }
    private void CloseSellPopup()
    {
        isSellPopupVisible = false;

        // Reset styles to hide the popup
        sellpopupTop = "-150%";
        sellpopupOpacity = "0";
        sellpopupTransform = "translate(-50%, -50%) scale(1.25)";
    }
    private void CloseSwapPopup()
    {
        isSwapPopupVisible = false;

        // Reset styles to hide the popup
        swappopupTop = "-150%";
        swappopupOpacity = "0";
        swappopupTransform = "translate(-50%, -50%) scale(1.25)";
    }

    private async Task makepurchase()
    {
        if(product.User.Id == userId)
        {
            await js.InvokeVoidAsync("alert", "You can't buy your own product");
            return; // Exit the method without proceeding further
        }
        if (offervalue == null)
        {
            await js.InvokeVoidAsync("alert", "Please fill in all the required fields with valid values.");
            return; // Exit the method without proceeding further
        }
        if (product.status == "sold")
        {
            await js.InvokeVoidAsync("alert", "This product is not available.");
            return; // Exit the method without proceeding further
        }
        var purchase = new Purchase
            {
                SellDate = DateTime.Now,
                OfferPrice = offervalue,
                Status = null,
                UserId = userId,
                PurchaseProductId = product.Id
            };
        await _client.PostAsJsonAsync(Endpoints.PurchasesEndpoint, purchase);

        var response = await _client.PostAsJsonAsync(Endpoints.PurchasesEndpoint, purchase);

        // Check if the request was successful
        if (response.IsSuccessStatusCode)
        {
            // Read the response content to get the newly created Purchase
            purchase = await response.Content.ReadFromJsonAsync<Purchase>();

            // Continue with creating the Chat
            var chat = new Chat
                {
                    Name = @product.Name,
                    DateCreated = DateTime.Now,
                    PurchaseId = purchase.Id,
                    SwapId = null
                };

            await _client.PostAsJsonAsync(Endpoints.ChatsEndpoint, chat);
            Navigation.NavigateTo("/chat/");
        }
    }

    private async Task makeswap()
    {
        if (offerProductId == 0)
        {
            // Display an error message or handle the validation error as needed
            // For example, you can show an alert using JavaScript
            await js.InvokeVoidAsync("alert", "Please select an option.");
            return; // Exit the method without proceeding further
        }
        if (product.User.Id == userId)
        {
            await js.InvokeVoidAsync("alert", "You can't swap your own product");
            return; // Exit the method without proceeding further
        }
        if (product.status == "sold")
        {
            await js.InvokeVoidAsync("alert", "This product is not available.");
            return; // Exit the method without proceeding further
        }
        var swap = new Swap
            {
                SwapDate = DateTime.Now,
                Status = null,
                OfferItemId = offerProductId,
                SwapProductId = product.Id,
                BuyerId = userId,
                SellerId = product.UserId
            };

        var responseS = await _client.PostAsJsonAsync(Endpoints.SwapsEndpoint, swap);

        if (responseS.IsSuccessStatusCode)
        {
            // Read the response content to get the newly created Purchase
            swap = await responseS.Content.ReadFromJsonAsync<Swap>();

            // Continue with creating the Chat
            var chat = new Chat
                {
                    Name = @product.Name,
                    DateCreated = DateTime.Now,
                    PurchaseId = null,
                    SwapId = swap.Id
                };

            await _client.PostAsJsonAsync(Endpoints.ChatsEndpoint, chat);
            Navigation.NavigateTo("/chat/");
        }

    }
}
