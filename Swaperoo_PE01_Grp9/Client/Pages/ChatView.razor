@page "/Chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Swaperoo_PE01_Grp9.Client.Static
@using Swaperoo_PE01_Grp9.Shared.Domain
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<head>
    <link href="css/landing.css" rel="stylesheet" />
    <link href="css/Chat.css" rel="stylesheet" />

</head>

<body>
    <div class="chatpage">
        <div class="chatbar">
            @if (Chats != null)
            {
                @foreach (var chat in Chats)
                {
                    @chat.Name
                    @if (chat.Product != null)
                    {
                        @chat.Product.Name
                    }
                    else
                    {
                        <p>>No product associated</p>
                    }
                }
            }

        </div>
        <div class="chatarea">
            <div class="form-group">
                <label>
                    User:
                    <input @bind="userInput" />
                </label>
            </div>
            <div class="form-group">
                <label>
                    Message:
                    <input @bind="messageInput" size="50" />
                </label>
            </div>
            <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

            <hr>

            <ul id="messagesList">
                @foreach (var message in messages)
                {
                    <li>@message</li>
                }
            </ul>
        </div>
        
    </div>
</body>


@code {
    private IList<Chat>? Chats;

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {

        Chats = await _client.GetFromJsonAsync<List<Chat>>($"{Endpoints.ChatsEndpoint}");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}