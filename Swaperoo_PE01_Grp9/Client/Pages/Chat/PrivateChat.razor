@page "/chat/view/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>PrivateChat</PageTitle>

<head>
    <link href="css/landing.css" rel="stylesheet" />
    <link href="css/Chat.css" rel="stylesheet" />
</head>

<body>
    <div class="chatpage">
        <div class="chatbar">
            @if (Chats != null)
            {
                @foreach (var chat in Chats)
                {
                    <a href="/chat/view/@chat.Id" class="chatbarcontent">
                        <div class="chatbarcontent">
                            @if(@chat.PurchaseId != null){
                            <div>
                                @chat.Purchase.PurchaseProduct.User.Name
                            </div>
                            <div>
                                @chat.Purchase.PurchaseProduct.Name
                            </div>
                            }
                            else{
                            <div>
                                @chat.Swap.SwapProduct.User.Name
                            </div>
                            <div>
                                @chat.Swap.SwapProduct.Name
                            </div>
                            }
                        </div>
                        
                    </a>
                }
            }
        </div>
        <div class="chatarea">
            <div class="productdisplaybar">
                <div class="productdisplaybar_name">
                    @product.Name
                </div>
                <div class="productdisplaybar_buttons">
                    <button class="product_button">Edit</button>
                    <button class="product_button">Confirm</button>
                </div>
            </div>

            <div class="chattextarea">
                @if (Messages != null)
                {
                    @foreach (var message in Messages)
                    {
                        @if (message.ChatId == id)
                        {
                            <div class="messagebox">
                                <div class="messageboxName">
                                    @message.Sender.Name
                                </div>
                                <div class="messageboxContent">
                                    @message.MessageContent
                                </div>
                            </div>
                        }
                    }
                }
                else
                {
                    <p>No messages available.</p>
                }
                <div class="messageinput">
                    <div class="messageinputbar">
                        <input class="messageinputbartext" @bind="messageInput" />
                    </div>
                    <div class="messageinputbutton">
                        <button @onclick="SendMessage">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

@code {
    [Parameter] public int id { get; set; }
    private List<Chat>? Chats;
    private List<Message>? Messages;
    private List<User>? users;

    Product? product = new Product();

    private string username;
    private string userId;

    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        Chats = await _client.GetFromJsonAsync<List<Chat>>($"{Endpoints.ChatsEndpoint}");
        Messages = await _client.GetFromJsonAsync<List<Message>>($"{Endpoints.MessagesEndpoint}");
        product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/Detail/{id}");
        users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        Console.WriteLine($"Username: {user.Identity.Name}");
        // Get the userId from the user's identity
        username = user.Identity.Name;

        @foreach (var i in users)
        {
            if (i.Email == username)
            {
                userId = i.Id;
            }
        }
        Console.WriteLine($"User ID: {userId}");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await js.InvokeVoidAsync("initScrollToBottom");
        }
    }


    private async Task SendMessage()
    {
        var message = new Message
            {
                MessageContent = messageInput,
                DateCreated = DateTime.Now,
                SenderId = userId,
                ChatId = id
            };

        await _client.PostAsJsonAsync(Endpoints.MessagesEndpoint, message);
        Messages = await _client.GetFromJsonAsync<List<Message>>($"{Endpoints.MessagesEndpoint}");
        messageInput = string.Empty;

        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        await js.InvokeVoidAsync("scrollToBottom");
    }

}

<script>
    // JavaScript function to scroll to the bottom
    window.scrollToBottom = function () {
        var chatArea = document.querySelector('.chatarea');
        if (chatArea) {
            chatArea.scrollTop = chatArea.scrollHeight;
        }
    };

    window.initScrollToBottom = function () {
        window.scrollToBottom();
    };
</script>
        