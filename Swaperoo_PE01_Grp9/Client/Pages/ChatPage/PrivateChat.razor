@page "/chat/view/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpInterceptorService _interceptor
@attribute [Authorize]

<PageTitle>PrivateChat</PageTitle>

<head>
    <link href="css/landing.css" rel="stylesheet" />
    <link href="css/Chat.css" rel="stylesheet" />
</head>

<body>
    <div class="chatpage">
        <div class="chatbar">
            @if (Chats != null)
            {
                @foreach (var chat in Chats)
                {
                    @if (chat.Purchase != null && (chat.Purchase.User?.Id == userId || chat.Purchase.PurchaseProduct?.User?.Id == userId) ||
                                     chat.Swap != null && (chat.Swap.SwapProduct?.User?.Id == userId || chat.Swap.OfferItem?.User?.Id == userId))
                    {
                        <a href="/chat/view/@chat.Id" class="chatbarcontent">
                            <div class="chatbarcontent">
                                @if (@chat.PurchaseId != null)
                                {
                                    <div>
                                        @chat.Purchase.PurchaseProduct.User.Name
                                    </div>
                                    <div>
                                        @chat.Purchase.PurchaseProduct.Name
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        @chat.Swap.SwapProduct.User.Name
                                    </div>
                                    <div>
                                        @chat.Swap.SwapProduct.Name
                                    </div>
                                }
                            </div>
                        
                    </a>
                    }
                }
            }
        </div>
        <div class="chatarea">
            <div class="productdisplaybar">
                @if(IndivChat.Purchase?.PurchaseProduct?.status == "sold" || IndivChat.Swap?.SwapProduct?.status =="sold" || IndivChat.Swap?.OfferItem?.status == "sold")
                {
                    <div class="productssold">
                        PRODUCT SOLD
                        @if (IndivChat.Purchase?.Status == "Confirmed" || IndivChat.Swap?.Status == "Confirmed" || IndivChat.Purchase?.Status == "Rated" || IndivChat.Swap?.Status == "Rated")
                        {
                            <div style="display:inline">
                                | <button class="product_button" @onclick="ToggleRatingPopUp" style="width:180px; font-size:20px">Leave a Rating</button>

                            </div>
                        }
                        
                    </div>
                }
                else
                {
                    @if (IndivChat.PurchaseId != null) //purchase
                    {
                    <div class="productdisplaybar_name">
                        <div>
                            @IndivChat.Purchase.PurchaseProduct.Name
                        </div>
                        <div>
                            S$@IndivChat.Purchase.OfferPrice
                        </div>
                    </div>
                    <div class="productdisplaybar_buttons">
                        @if (IndivChat.Purchase.PurchaseProduct.User.Id == userId)
                        {
                            <button class="product_button" @onclick="ToggleEditPopUp">Edit</button>
                            <button class="product_button" @onclick="ToggleConfirmPopUp">Confirm</button>
                        }
                        else
                        {
                            <button class="product_button" @onclick="ToggleEditPopUp" style="width:140px">Edit</button>
                        }

                    </div>
                    }
                    else{ //swap
                    <div class="productdisplaybar_name">
                        <div>
                            @IndivChat.Swap?.SwapProduct.Name
                        </div>
                        <div>
                            @IndivChat.Swap?.OfferItem.Name
                        </div>
                    </div>
                    <div class="productdisplaybar_buttons">
                            @if (IndivChat.Swap?.SwapProduct?.User?.Id == userId)
                            {
                                <button class="product_button" @onclick="ToggleEditPopUp">Edit</button>
                                <button class="product_button" @onclick="ToggleConfirmPopUp">Confirm</button>
                            }
                            else
                            {
                                <button class="product_button" @onclick="ToggleEditPopUp" style="width:140px">Edit</button>
                            }

                    </div>
                    }
                }
            </div>

            <div class="chattextarea">
                @if (Messages != null)
                {
                    @foreach (var message in Messages)
                    {
                        @if (message.ChatId == id)
                        {
                            @if (message.Sender.Id == userId)
                            {
                                <div class="messagebox">
                                    <div class="messageboxName">
                                        @message.Sender.Name
                                    </div>
                                    <div class="messageboxContent">
                                        @message.MessageContent
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="othermessagebox">
                                    <div class="messageboxName">
                                        @message.Sender.Name
                                    </div>
                                    <div class="messageboxContent">
                                        @message.MessageContent
                                    </div>
                                </div>
                            }
                        }
                    }
                }
                else
                {
                    <p>No messages available.</p>
                }
                <div class="messageinput">
                    <div class="messageinputcontent">
                        <div class="messageinputbar">
                            <input class="messageinputbartext" @bind="messageInput" />
                        </div>
                        <div class="messageinputbutton">
                            <button @onclick="SendMessage">Send</button>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
    <div class="popup" style="top: @editpopupTop; opacity: @editpopupOpacity; transform: @editpopupTransform">
        <div class="close-btn" @onclick="CloseEditPopup">&times;</div>
        <div class="sellform">
            <h2>Edit Offer</h2>

            @if(IndivChat.Purchase != null)
            {
                <h3><img src="@IndivChat.Purchase.PurchaseProduct.imagepath" class="productofferimage"> @IndivChat.Purchase.PurchaseProduct.Name"</h3>
                <div class="sell-form-element">
                    <label for="offer">Your offer</label>
                    <input type="text" id="offer" placeholder="@IndivChat.Purchase.OfferPrice" @bind="offervalue">
                </div>
                <div class="sell-form-element">
                    <button @onclick="editpurchaseoffer">Edit Offer</button>
                </div>
            }
            else
            {
                @if(IndivChat.Swap != null)
                {
                    <h3><img src="@IndivChat.Swap.SwapProduct.imagepath" class="productofferimage"> @IndivChat.Swap.SwapProduct.Name"</h3>
                    <div class="sell-form-element">
                        <label for="offer">Your offer</label>
                        <select id="swapoffer" @bind="offerProductId">
                            @if (products != null)
                            {
                                @foreach (var p in products)
                                {
                                    if (p.UserId == userId && p.Id != IndivChat.Swap.OfferItemId)
                                    {
                                        <option value="@p.Id">@p.Name</option>
                                    }
                                }
                            }
                        </select>
                    </div>
                    <div class="sell-form-element">
                        <button @onclick="editswapoffer">Edit Offer</button>
                    </div>
                }   
            }
        </div>
    </div>
    <div class="popup" style="top: @confirmpopupTop; opacity: @confirmpopupOpacity; transform: @confirmpopupTransform">
        <div class="close-btn" @onclick="CloseConfirmPopup">&times;</div>
        <div class="sellform">
            <h2>Confirm Offer</h2>
            @if (IndivChat.Purchase != null)
            {
                <h3><img src="@IndivChat.Purchase.PurchaseProduct.imagepath" class="productofferimage"> @IndivChat.Purchase.PurchaseProduct.Name</h3>
                <h3>For: @IndivChat.Purchase.OfferPrice</h3>
                <div class="sell-form-element">
                    <button @onclick="confirmpurchaseoffer">Confirm Offer</button>
                </div>

            }
            else
            {
                @if(IndivChat.Swap != null)
                {
                    <h3><img src="@IndivChat.Swap.SwapProduct.imagepath" class="productofferimage"> @IndivChat.Swap.SwapProduct.Name</h3>
                    <h3><img src="@IndivChat.Swap.OfferItem.imagepath" class="productofferimage">@IndivChat.Swap.OfferItem.Name</h3>
                    <div class="sell-form-element">
                        <button @onclick="confirmswapoffer">Confirm Offer</button>
                    </div>
                }
            }
        </div>
    </div>

    <div class="popup" style="top: @ratingpopupTop; opacity: @ratingpopupOpacity; transform: @ratingpopupTransform">
        <div class="close-btn" @onclick="CloseRatingPopup">&times;</div>
        <div class="sellform">
            <h2>Rating</h2>
                <div class="sell-form-element">
                    <label for="ratingvalue">Rating</label>
                    <select id="ratingvalue" @bind="ratingvalue">
                    <option value="" disabled selected>Select an option</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                    </select>
                </div>
                <div class="sell-form-element">
                    <label for="desc">Description</label>
                    <textarea id="desc" @bind="desc"></textarea>
                </div>
            @if (IndivChat.Purchase != null)
            {
                <div class="sell-form-element">
                    <button @onclick="CreatePurchaseRating">Confirm Offer</button>
                </div>

            }
            else
            {
                @if (IndivChat.Swap != null)
                {
                    
                    <div class="sell-form-element">
                        <button @onclick="CreateSwapRating">Confirm Offer</button>
                    </div>
                }
            }
        </div>
    </div>
</body>

@code {
    [Parameter] public int id { get; set; }
    private List<Chat>? Chats;
    private List<Message>? Messages;
    private List<User>? users;
    private List<Product>? products;

    Chat? IndivChat = new Chat();

    private string username;
    private int userId;

    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    private int offervalue;
    private int offerProductId;

    private int? purchaseid;

    private string ratingstatus;
    //RATING---------------------
    public int ratingvalue;
    public string desc;

    //popup---------------------
    private bool isEditPopupVisible = false;
    private bool isConfirmPopupVisible = false;
    private bool isRatingPopupVisible = false;

    private string editpopupTop = "-150%";
    private string editpopupOpacity = "0";
    private string editpopupTransform = "translate(-50%, -50%) scale(1.25)";

    private string confirmpopupTop = "-150%";
    private string confirmpopupOpacity = "0";
    private string confirmpopupTransform = "translate(-50%, -50%) scale(1.25)";

    private string ratingpopupTop = "-150%";
    private string ratingpopupOpacity = "0";
    private string ratingpopupTransform = "translate(-50%, -50%) scale(1.25)";
    //--------------------------------

    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Chats = await _client.GetFromJsonAsync<List<Chat>>($"{Endpoints.ChatsEndpoint}");
        IndivChat = await _client.GetFromJsonAsync<Chat>($"{Endpoints.ChatsEndpoint}/{id}");
        Messages = await _client.GetFromJsonAsync<List<Message>>($"{Endpoints.MessagesEndpoint}");
        users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
        products = await _client.GetFromJsonAsync<List<Product>>(Endpoints.ProductsEndpoint);

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        Console.WriteLine($"Username: {user.Identity.Name}");
        // Get the userId from the user's identity
        username = user.Identity.Name;

        @foreach (var i in users)
        {
            if (i.Email == username)
            {
                userId = i.Id;
            }
        }
        Console.WriteLine($"User ID: {userId}");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScrollToBottom();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        IndivChat = await _client.GetFromJsonAsync<Chat>($"{Endpoints.ChatsEndpoint}/{id}");
        // Additional data retrieval if needed
        await ScrollToBottom();
    }

    private async Task SendMessage()
    {
        @if (messageInput != null)
        {
            var message = new Message
            {
                MessageContent = messageInput,
                DateCreated = DateTime.Now,
                SenderId = userId,
                ChatId = id
            };

        await _client.PostAsJsonAsync(Endpoints.MessagesEndpoint, message);
        Messages = await _client.GetFromJsonAsync<List<Message>>($"{Endpoints.MessagesEndpoint}");
        messageInput = null;
        }
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        await js.InvokeVoidAsync("scrollToBottom");
    }



    public async Task editpurchaseoffer()
    {
        var purchase = new Purchase()
            {
                Id = IndivChat.Purchase.Id,
                SellDate = IndivChat.Purchase.SellDate,
                OfferPrice = offervalue,
                Status = IndivChat.Purchase.Status,
                UserId = IndivChat.Purchase.UserId,
                PurchaseProductId = IndivChat.Purchase.PurchaseProductId
        };
        await _client.PutAsJsonAsync($"{Endpoints.PurchasesEndpoint}/{IndivChat.Purchase.Id}", purchase);
        IndivChat = await _client.GetFromJsonAsync<Chat>($"{Endpoints.ChatsEndpoint}/{id}");
        CloseEditPopup();
    }

    public async Task confirmpurchaseoffer()
    {
        var purchase = new Purchase()
            {
                Id = IndivChat.Purchase.Id,
                SellDate = IndivChat.Purchase.SellDate,
                OfferPrice = IndivChat.Purchase.OfferPrice,
                Status = "Confirmed",
                UserId = IndivChat.Purchase.UserId,
                PurchaseProductId = IndivChat.Purchase.PurchaseProductId
            };

        var product = new Product()
            {
                Id = IndivChat.Purchase.PurchaseProduct.Id,
                Name = IndivChat.Purchase.PurchaseProduct.Name,
                DateCreated = IndivChat.Purchase.PurchaseProduct.DateCreated,
                Description = IndivChat.Purchase.PurchaseProduct.Description,
                imagepath = IndivChat.Purchase.PurchaseProduct.imagepath,
                price = IndivChat.Purchase.OfferPrice,
                status = "sold",
                UserId = IndivChat.Purchase.PurchaseProduct.UserId,
                SubCategoryId = IndivChat.Purchase.PurchaseProduct.SubCategoryId
            };

        await _client.PutAsJsonAsync($"{Endpoints.PurchasesEndpoint}/{IndivChat.Purchase.Id}", purchase);
        await _client.PutAsJsonAsync($"{Endpoints.ProductsEndpoint}/{IndivChat.Purchase.PurchaseProduct.Id}", product);
        IndivChat = await _client.GetFromJsonAsync<Chat>($"{Endpoints.ChatsEndpoint}/{id}");
        CloseConfirmPopup();
    }

    public async Task editswapoffer()
    {
        var swap = new Swap()
            {
                Id = IndivChat.Swap.Id,
                SwapDate = IndivChat.Swap.SwapDate,
                Status = IndivChat.Swap.Status,
                OfferItemId = offerProductId,
                SwapProductId = IndivChat.Swap.SwapProductId
            };
        await _client.PutAsJsonAsync($"{Endpoints.SwapsEndpoint}/{IndivChat.Swap.Id}", swap);
        IndivChat = await _client.GetFromJsonAsync<Chat>($"{Endpoints.ChatsEndpoint}/{id}");
        CloseEditPopup();
    }

    public async Task confirmswapoffer()
    {
        var swap = new Swap()
            {
                Id = IndivChat.Swap.Id,
                SwapDate = IndivChat.Swap.SwapDate,
                Status = "Confirmed",
                OfferItemId = IndivChat.Swap.OfferItemId,
                SwapProductId = IndivChat.Swap.SwapProductId
            };
        var swapproduct = new Product()
            {
                Id = IndivChat.Swap.SwapProduct.Id,
                Name = IndivChat.Swap.SwapProduct.Name,
                DateCreated = IndivChat.Swap.SwapProduct.DateCreated,
                Description = IndivChat.Swap.SwapProduct.Description,
                imagepath = IndivChat.Swap.SwapProduct.imagepath,
                price = IndivChat.Swap.SwapProduct.price,
                status = "sold",
                UserId = IndivChat.Swap.SwapProduct.UserId,
                SubCategoryId = IndivChat.Swap.SwapProduct.SubCategoryId
            };
        var offerproduct = new Product()
            {
                Id = IndivChat.Swap.OfferItem.Id,
                Name = IndivChat.Swap.OfferItem.Name,
                DateCreated = IndivChat.Swap.OfferItem.DateCreated,
                Description = IndivChat.Swap.OfferItem.Description,
                imagepath = IndivChat.Swap.OfferItem.imagepath,
                price = IndivChat.Swap.OfferItem.price,
                status = "sold",
                UserId = IndivChat.Swap.OfferItem.UserId,
                SubCategoryId = IndivChat.Swap.OfferItem.SubCategoryId
            };

        await _client.PutAsJsonAsync($"{Endpoints.SwapsEndpoint}/{IndivChat.Swap.Id}", swap);
        await _client.PutAsJsonAsync($"{Endpoints.ProductsEndpoint}/{IndivChat.Swap.SwapProduct.Id}", swapproduct);
        await _client.PutAsJsonAsync($"{Endpoints.ProductsEndpoint}/{IndivChat.Swap.OfferItem.Id}", offerproduct);
        IndivChat = await _client.GetFromJsonAsync<Chat>($"{Endpoints.ChatsEndpoint}/{id}");
        CloseConfirmPopup();

    }

    public async Task CreatePurchaseRating()
    {
        if (string.IsNullOrWhiteSpace(desc) || ratingvalue == 0)
        {
            // Display an error message or handle the validation error as needed
            // For example, you can show an alert using JavaScript
            await js.InvokeVoidAsync("alert", "Please fill in all the required fields with valid values.");
            return; // Exit the method without proceeding further
        }
        var rating = new Rating()
            {
                RatingValue = ratingvalue,
                Description = desc,
                DateCreated = DateTime.Now,
                UserId = userId,
                PurchaseId = IndivChat.PurchaseId,
                SwapId = null,
            };

        var product = new Product()
            {
                Id = IndivChat.Purchase.PurchaseProduct.Id,
                Name = IndivChat.Purchase.PurchaseProduct.Name,
                DateCreated = IndivChat.Purchase.PurchaseProduct.DateCreated,
                Description = IndivChat.Purchase.PurchaseProduct.Description,
                imagepath = IndivChat.Purchase.PurchaseProduct.imagepath,
                price = IndivChat.Purchase.OfferPrice,
                status = "Rated",
                UserId = IndivChat.Purchase.PurchaseProduct.UserId,
                SubCategoryId = IndivChat.Purchase.PurchaseProduct.SubCategoryId
            };

        await _client.PostAsJsonAsync(Endpoints.RatingsEndpoint, rating);
        await _client.PutAsJsonAsync($"{Endpoints.ProductsEndpoint}/{IndivChat.Purchase.PurchaseProduct.Id}", product);
        CloseRatingPopup();
    }

    public async Task CreateSwapRating()
    {
        if (string.IsNullOrWhiteSpace(desc) || ratingvalue == 0)
        {
            // Display an error message or handle the validation error as needed
            // For example, you can show an alert using JavaScript
            await js.InvokeVoidAsync("alert", "Please fill in all the required fields with valid values.");
            return; // Exit the method without proceeding further
        }

        var rating = new Rating()
            {
                RatingValue = ratingvalue,
                Description = desc,
                DateCreated = DateTime.Now,
                UserId = userId,
                PurchaseId = null,
                SwapId = IndivChat.SwapId
            };


        if (userId == IndivChat.Swap?.SwapProduct.User.Id)
        {
            var swapproduct = new Product()
            {
                Id = IndivChat.Swap.SwapProduct.Id,
                Name = IndivChat.Swap.SwapProduct.Name,
                DateCreated = IndivChat.Swap.SwapProduct.DateCreated,
                Description = IndivChat.Swap.SwapProduct.Description,
                imagepath = IndivChat.Swap.SwapProduct.imagepath,
                price = IndivChat.Swap.SwapProduct.price,
                status = "Rated",
                UserId = IndivChat.Swap.SwapProduct.UserId,
                SubCategoryId = IndivChat.Swap.SwapProduct.SubCategoryId
            };
            await _client.PutAsJsonAsync($"{Endpoints.ProductsEndpoint}/{IndivChat.Swap.SwapProduct.Id}", swapproduct);

        }
        else
        { 
        var offerproduct = new Product()
            {
                Id = IndivChat.Swap.OfferItem.Id,
                Name = IndivChat.Swap.OfferItem.Name,
                DateCreated = IndivChat.Swap.OfferItem.DateCreated,
                Description = IndivChat.Swap.OfferItem.Description,
                imagepath = IndivChat.Swap.OfferItem.imagepath,
                price = IndivChat.Swap.OfferItem.price,
                status = "Rated",
                UserId = IndivChat.Swap.OfferItem.UserId,
                SubCategoryId = IndivChat.Swap.OfferItem.SubCategoryId
            };
        await _client.PutAsJsonAsync($"{Endpoints.ProductsEndpoint}/{IndivChat.Swap.OfferItem.Id}", offerproduct);
        }

        await _client.PostAsJsonAsync(Endpoints.RatingsEndpoint, rating);
        CloseRatingPopup();
    }

    //----------------POPUP---------------//
    private void ToggleEditPopUp()
    {
        isEditPopupVisible = !isEditPopupVisible;

        // Set styles based on popup visibility
        editpopupTop = isEditPopupVisible ? "50%" : "-150%";
        editpopupOpacity = isEditPopupVisible ? "1" : "0";
        editpopupTransform = isEditPopupVisible ? "translate(-50%, -50%) scale(1)" : "translate(-50%, -50%) scale(1.25)";
    }
    private void ToggleConfirmPopUp()
    {
        isConfirmPopupVisible = !isConfirmPopupVisible;

        // Set styles based on popup visibility
        confirmpopupTop = isConfirmPopupVisible ? "50%" : "-150%";
        confirmpopupOpacity = isConfirmPopupVisible ? "1" : "0";
        confirmpopupTransform = isConfirmPopupVisible ? "translate(-50%, -50%) scale(1)" : "translate(-50%, -50%) scale(1.25)";
    }
    private void CloseEditPopup()
    {
        isEditPopupVisible = false;

        // Reset styles to hide the popup
        editpopupTop = "-150%";
        editpopupOpacity = "0";
        editpopupTransform = "translate(-50%, -50%) scale(1.25)";
    }
    private void CloseConfirmPopup()
    {
        isConfirmPopupVisible = false;

        // Reset styles to hide the popup
        confirmpopupTop = "-150%";
        confirmpopupOpacity = "0";
        confirmpopupTransform = "translate(-50%, -50%) scale(1.25)";
    }
    private void ToggleRatingPopUp()
    {
        isRatingPopupVisible = !isRatingPopupVisible;

        // Set styles based on popup visibility
        ratingpopupTop = isRatingPopupVisible ? "50%" : "-150%";
        ratingpopupOpacity = isRatingPopupVisible ? "1" : "0";
        ratingpopupTransform = isRatingPopupVisible ? "translate(-50%, -50%) scale(1)" : "translate(-50%, -50%) scale(1.25)";
    }
    private void CloseRatingPopup()
    {
        isRatingPopupVisible = false;

        // Reset styles to hide the popup
        ratingpopupTop = "-150%";
        ratingpopupOpacity = "0";
        ratingpopupTransform = "translate(-50%, -50%) scale(1.25)";
    }
}

<script>
    // JavaScript function to scroll to the bottom
    window.scrollToBottom = function () {
        var chatArea = document.querySelector('.chattextarea');
        if (chatArea) {
            chatArea.scrollTop = chatArea.scrollHeight;
        }
    };
</script>
        