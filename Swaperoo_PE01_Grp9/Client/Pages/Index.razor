@page "/"
@inject HttpClient _client
@inject IJSRuntime js
@using Swaperoo_PE01_Grp9.Shared.Domain
@using Swaperoo_PE01_Grp9.Client.Static
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpInterceptorService _interceptor
@attribute [Authorize]

<PageTitle>Index</PageTitle>
<head>
    <link href="css/landing.css" rel="stylesheet" />
</head>


<body>
    
    <div class="display">
        <div class="lady1"><img src="images/lady1.png" style="width: 400px;"></div>
        <div class="display_text">Do Your Part in Saving The World.<br>Buy Green.</div>
        <div class="lady2"><img src="images/lady2.png" style="width: 300px;"></div> 
    </div>

    <AuthorizeView>
        <Authorized>
            <div class="Featured_grid">
                @if (Products != null)
                {
                    @foreach (var product in Products)
                    {
                        <div class="Featured">
                            <a href="/product/listed/@product.Id">
                                <div class="product_imgrow">
                                    <img class="product_img" src="@product.imagepath">
                                </div>

                                <div class="product_info">
                                    <p class="product_name">@product.Name</p>
                                    <p class="product_price">$@product.price</p>
                                </div>
                            </a>
                            <a href="/profile/@product.User.Id">
                                <div class="productuserpfp">
                                    <img class="product-userppfp" src="@product.User.profilepicture">
                                </div>
                                <div class="productusertext">
                                    <div class="productusername">
                                        @product.User.Name
                                    </div>
                                    <div class="productusername">
                                        Region: @product.User.Region
                                    </div>
                                </div>
                            </a>
                            @if(product.status == "sold")
                            {
                                <div class="status">
                                    @product.status
                                </div>
                            }
                            
                        </div>
                    }
                }
            </div>
        </Authorized>
    </AuthorizeView>
    
    
</body>
@code {
    
    private List<User>? users;
    private string username;
    public int userId;
    private List<Product>? Products;

    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        try
        {

            // No need to check authentication state before making the API call
            Products = await _client.GetFromJsonAsync<List<Product>>(Endpoints.ProductsEndpoint);
            users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;

            Console.WriteLine($"Username: {user.Identity.Name}");
            // Get the userId from the user's identity
            username = user.Identity.Name;

            @foreach (var i in users)
            {
                if (i.Email == username)
                {
                    userId = i.Id;
                }
            }
            Console.WriteLine($"User ID: {userId}");

        }
        catch (AccessTokenNotAvailableException ex)
        {
            // Handle exception if necessary
            Console.WriteLine($"AccessTokenNotAvailableException: {ex.Message}");
        }
    }

    
    
}