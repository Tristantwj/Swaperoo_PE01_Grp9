@inject HttpClient _client
@using Swaperoo_PE01_Grp9.Client.Components

<EditForm Model="@message" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Message Content: </label>
            <div>
                <InputText @bind-Value="@message.MessageContent" class="form-control" />
                <ValidationMessage For="@(() => message.MessageContent)" />
            </div>
        </div>
        <div class="form-group">
            <label>Created Date: </label>
            <div>
                <InputDate @bind-Value="@message.DateCreated" class="form-control" />
                <ValidationMessage For="@(() => message.DateCreated)" />
            </div>
        </div>

        <div class="form-group">
            <label>Sender: </label>
            <div>
                <InputSelect @bind-Value="message.SenderId" class="form-control">
                    @if (Users != null)
                    {
                        @foreach (var user in Users)
                        {
                            <option value="@user.Id">@user.Id - @user.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>message.SenderId)"></ValidationMessage>
            </div>
        </div>

        <div class="form-group">
            <label>Chat: </label>
            <div>
                <InputSelect @bind-Value="message.ChatId" class="form-control">
                    @if (Chats != null)
                    {
                        @foreach (var chat in Chats)
                        {
                            <option value="@chat.Id">@chat.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>message.ChatId)"></ValidationMessage>
            </div>
        </div>
    </fieldset>


    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="messages" />

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Message? message { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<User>? Users;
    private IList<Chat>? Chats;


    protected async override Task OnInitializedAsync()
    {
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
        Chats = await _client.GetFromJsonAsync<List<Chat>>($"{Endpoints.ChatsEndpoint}");
    }
}

