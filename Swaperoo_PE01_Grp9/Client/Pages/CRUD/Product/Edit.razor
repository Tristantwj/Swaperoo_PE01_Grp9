@page "/products/edit/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime JSRuntime
@layout NoMenuLayout

<h3>Edit Products</h3>

<FormComponent ButtonText="Update" OnValidSubmit="EditProducts" product="product" />

@code {
    [Parameter] public int id { get; set; }
    Product? product = new Product();

    protected async override Task OnParametersSetAsync()
    {
        product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/detail/{id}");
    }

    async Task EditProducts()
    {
        if (string.IsNullOrWhiteSpace(product.Name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a product name.");
            return;
        }
        if (string.IsNullOrWhiteSpace(product.Description))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a product description.");
            return;
        }
        if (string.IsNullOrWhiteSpace(product.imagepath))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a product image path.");
            return;
        }
        if (string.IsNullOrWhiteSpace(product.status))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a product status.");
            return;
        }
        try
        {
            await _client.PutAsJsonAsync($"{Endpoints.ProductsEndpoint}/{id}", product);
            _navManager.NavigateTo("/products/");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating category: {ex.Message}");
        }
    }
}
}
