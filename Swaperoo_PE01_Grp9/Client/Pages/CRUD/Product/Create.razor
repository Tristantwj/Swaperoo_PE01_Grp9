@page "/products/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime JSRuntime
@layout NoMenuLayout

<h3 class="card-title">Create New Product</h3>
<hr />
<br />

<FormComponent ButtonText="Create Product" product="product" OnValidSubmit="@CreateProduct" />


@code {
    Product product = new Product();

    private IList<User>? Users;
    private IList<SubCategory>? SubCategorys;

    protected async override Task OnInitializedAsync()
    {
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
        SubCategorys = await _client.GetFromJsonAsync<List<SubCategory>>($"{Endpoints.SubCategorysEndpoint}");
    }

    private async Task CreateProduct()
    {
        if (string.IsNullOrWhiteSpace(product.Name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a product name.");
            return;
        }
        if (string.IsNullOrWhiteSpace(product.Description))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a product description.");
            return;
        }
        if (string.IsNullOrWhiteSpace(product.imagepath))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a product image path.");
            return;
        }
        if (string.IsNullOrWhiteSpace(product.status))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a product status.");
            return;
        }
        try
        {
            await _client.PostAsJsonAsync(Endpoints.CategorysEndpoint, product);
            _navManager.NavigateTo("/products/");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating category: {ex.Message}");
        }
    }

}