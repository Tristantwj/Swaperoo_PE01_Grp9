@page "/products/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable
@layout AdminMenuLayout

<h3 class="card-title">Products</h3>
<br />

<a href="/products/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Product
</a>
<br />
<br />


@if (Products == null)
{
    <div class="alert alert-info">Loading Products....</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>ProductId</th>
                <th>Name</th>
                <th>Date</th>
                <th>Image</th>
                <th>Seller</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.DateCreated.Date.ToString("dd MMMM yyyy")</td>
                    <td><img src=@product.imagepath height="100"/></td>
                    <td>@product.User.Name</td>
                    <td>
                        <a href="/Products/view/@product.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>

                        <a href="/Products/edit/@product.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>

                        <button class="btn btn-danger" @onclick="@(()=>Delete(product.Id))">
                            <span class="oi oi-delete"></span>
                        </button>

                    </td>
                </tr>

            }


        </tbody>



    </table>
}
<br />
@code {
    private List<Product>? Products;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }

    async Task Delete(int ProductId)
    {
        if (Products != null)
        {
            var Product = Products.First(q => q.Id == ProductId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Product.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ProductsEndpoint}/{ProductId}");
                await OnInitializedAsync();
            }
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#usersTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#usersTable");
    }
} 