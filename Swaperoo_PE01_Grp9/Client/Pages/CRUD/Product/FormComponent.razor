@inject HttpClient _client
@using Swaperoo_PE01_Grp9.Client.Components

<EditForm Model="@product" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="@product.Name" class="form-control" />
                <ValidationMessage For="@(() => product.Name)" />
            </div>
        </div>

        <div class="form-group">
            <label>Created Date: </label>
            <div>
                <InputDate @bind-Value="@product.DateCreated" class="form-control" />
                <ValidationMessage For="@(() => product.DateCreated)" />
            </div>
        </div>

        <div class="form-group">
            <label>Description: </label>
            <div>
                <InputText @bind-Value="@product.Description" class="form-control" />
                <ValidationMessage For="@(()=>product.Description)" />
            </div>
        </div>

        <div class="form-group">
            <label>Image Path: </label>
            <div>
                <InputText @bind-Value="@product.imagepath" class="form-control" />
                <ValidationMessage For="@(()=>product.imagepath)" />
            </div>
        </div>

        <div class="form-group">
            <label>Price: </label>
            <div>
                <InputNumber @bind-Value="@product.price" class="form-control" />
                <ValidationMessage For="@(()=>product.price)" />
            </div>
        </div>

        <div class="form-group">
            <label>Status: </label>
            <div>
                <InputSelect @bind-Value="product.status" class="form-control">
                    <option value="ongoing">ongoing</option>
                    <option value="sold">sold</option>
                </InputSelect>
                <ValidationMessage For="@(()=>product.status)"></ValidationMessage>
            </div>
        </div>

        <div class="form-group">
            <label>Seller: </label>
            <div>
                <InputSelect @bind-Value="product.UserId" class="form-control">
                    @if (Users != null)
                    {
                        @foreach (var user in Users)
                        {
                            <option value="@user.Id">@user.Id - @user.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>product.UserId)"></ValidationMessage>
            </div>
        </div>

        <div class="form-group">
            <label>Sub Category: </label>
            <div>
                <InputSelect @bind-Value="product.SubCategoryId" class="form-control">
                    @if (SubCategorys != null)
                    {
                        @foreach (var subCategory in SubCategorys)
                        {
                            <option value="@subCategory.Id">@subCategory.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>product.SubCategoryId)"></ValidationMessage>
            </div>
        </div>

    </fieldset>


    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="products" />

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Product? product { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<User>? Users;
    private IList<SubCategory>? SubCategorys;


    protected async override Task OnInitializedAsync()
    {
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
        SubCategorys = await _client.GetFromJsonAsync<List<SubCategory>>($"{Endpoints.SubCategorysEndpoint}");
    }
}

