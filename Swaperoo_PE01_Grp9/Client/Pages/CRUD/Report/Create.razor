@page "/reports/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime JSRuntime
@layout NoMenuLayout

<h3 class="card-title">Create New Report</h3>
<hr />
<br />

<FormComponent ButtonText="Create New Report" report="report" OnValidSubmit="@CreateReport" />

@code {
    Report report = new Report();

    private IList<Product>? Products;
    private IList<User>? ReporterUsers;
    private IList<User>? ReportedUsers;

    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        ReporterUsers = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
        ReportedUsers = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
    }

    private async Task CreateReport()
    {
        await _client.PostAsJsonAsync(Endpoints.ReportsEndpoint, report);
        _navManager.NavigateTo("/reports/");
        if (string.IsNullOrWhiteSpace(report.ReportType))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a report type.");
            return;
        }
        if (string.IsNullOrWhiteSpace(report.Description))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a report description.");
            return;
        }
        if (string.IsNullOrWhiteSpace(report.status))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a report status.");
            return;
        }
        try
        {
            await _client.PostAsJsonAsync(Endpoints.ReportsEndpoint, report);
            _navManager.NavigateTo("/reports/");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating report: {ex.Message}");
        }
    }

}