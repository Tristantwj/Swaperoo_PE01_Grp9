@page "/ratings/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime JSRuntime
@layout NoMenuLayout

<h3 class="card-title">Create New Rating</h3>
<hr />
<br />

<FormComponent ButtonText="Create New Rating" rating="rating" OnValidSubmit="@CreateRating" />

@code {
    Rating rating = new Rating();

    private IList<User>? Users;
    private IList<Purchase>? Purchases;
    private IList<Swap>? Swaps;

    protected async override Task OnInitializedAsync()
    {
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
        Purchases = await _client.GetFromJsonAsync<List<Purchase>>($"{Endpoints.PurchasesEndpoint}");
        Swaps = await _client.GetFromJsonAsync<List<Swap>>($"{Endpoints.UsersEndpoint}");
    }

    private async Task CreateRating()
    {
        if (string.IsNullOrWhiteSpace(rating.Description))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a rating description.");
            return;
        }
        try
        {
            await _client.PostAsJsonAsync(Endpoints.RatingsEndpoint, rating);
            _navManager.NavigateTo("/ratings/");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating rating: {ex.Message}");
        }
    }

}