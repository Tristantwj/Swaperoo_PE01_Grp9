@inject HttpClient _client
@using Swaperoo_PE01_Grp9.Client.Components

<EditForm Model="@swap" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>OfferItem: </label>
            <div>
                <InputSelect @bind-Value="swap.OfferItemId" class="form-control">
                    @if (OfferItems != null)
                    {
                        @foreach (var offerItem in OfferItems)
                        {
                            <option value="@offerItem.Id">@offerItem.Id - @offerItem.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>swap.OfferItemId)"></ValidationMessage>
            </div>
        </div>

        <div class="form-group">
            <label>Swapped Product: </label>
            <div>
                <InputSelect @bind-Value="swap.SwapProductId" class="form-control">
                    @if (SwapProducts != null)
                    {
                        @foreach (var swapProduct in SwapProducts)
                        {
                            <option value="@swapProduct.Id">@swapProduct.Id - @swapProduct.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>swap.SwapProductId)"></ValidationMessage>
            </div>
        </div>
        <div class="form-group">
            <label>Buyer Status: </label>
            <div>
                <InputSelect @bind-Value="@swap.BuyerStatus" class="form-control">
                    <option value="">Null</option>
                    <option value="Confirmed">Confirmed</option>
                    <option value="Rated">Rated</option>
                </InputSelect>
                <ValidationMessage For="@(() => swap.BuyerStatus)" />
            </div>
        </div>
        <div class="form-group">
            <label>Seller Status: </label>
            <div>
                <InputSelect @bind-Value="@swap.SellerStatus" class="form-control">
                    <option value="">Null</option>
                    <option value="Confirmed">Confirmed</option>
                    <option value="Rated">Rated</option>
                </InputSelect>
                <ValidationMessage For="@(() => swap.SellerStatus)" />
            </div>
        </div>

    </fieldset>


    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="swaps" />

</EditForm>



@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Swap? swap { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Product>? OfferItems;
    private IList<Product>? SwapProducts;
    private IList<User>? Buyers;
    private IList<User>? Sellers;


    protected async override Task OnInitializedAsync()
    {
        OfferItems = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        SwapProducts = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        Buyers = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
        Sellers = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
        swap.SwapDate = DateTime.Now;
    }
}

