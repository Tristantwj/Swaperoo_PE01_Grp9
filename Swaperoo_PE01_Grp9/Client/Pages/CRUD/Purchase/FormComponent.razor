@inject HttpClient _client
@using Swaperoo_PE01_Grp9.Client.Components

<EditForm Model="@purchase" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Created Date: </label>
            <div>
                <InputDate @bind-Value="@purchase.SellDate" class="form-control" />
                <ValidationMessage For="@(() => purchase.SellDate)" />
            </div>
        </div>
        <div class="form-group">
            <label>Offer Price: </label>
            <div>
                <InputNumber @bind-Value="@purchase.OfferPrice" class="form-control" />
                <ValidationMessage For="@(()=>purchase.OfferPrice)" />
            </div>
        </div>
        <div class="form-group">
            <label>User: </label>
            <div>
                <InputSelect @bind-Value="purchase.UserId" class="form-control">
                    @if (Users != null)
                    {
                        @foreach (var user in Users)
                        {
                            <option value="@user.Id">@user.Id - @user.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>purchase.UserId)"></ValidationMessage>
            </div>
        </div>

        <div class="form-group">
            <label>Purchased Product: </label>
            <div>
                <InputSelect @bind-Value="purchase.PurchaseProductId" class="form-control">
                    @if (PurchaseProducts != null)
                    {
                        @foreach (var purchaseProduct in PurchaseProducts)
                        {
                            <option value="@purchaseProduct.Id">@purchaseProduct.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>purchase.PurchaseProductId)"></ValidationMessage>
            </div>
        </div>

    </fieldset>


    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="purchases" />

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Purchase? purchase { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<User>? Users;
    private IList<Product>? PurchaseProducts;


    protected async override Task OnInitializedAsync()
    {
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
        PurchaseProducts = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }
 }

