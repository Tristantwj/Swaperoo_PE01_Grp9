@page "/categorys/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject HttpInterceptorService _interceptor
@layout AdminMenuLayout

<h3 class="card-title">Categorys</h3>
<br />


<a href="/categorys/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Categorys
</a>
<br />
<br />
@if (Categorys == null)
{
    <div class="alert alert-info">Loading Categorys....</div>
}
else
{
    <table class="table table-responsive" id="categorysTable">
        <thead>
            <tr>
                <th>Category Id</th>
                <th>Customer Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in Categorys)
            {
                <tr>
                    <td>@category.Id</td>
                    <td>@category.Name</td>
                    <td>
                        <a href="/Categorys/view/@category.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Categorys/edit/@category.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(category.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<br />
@code {
    private List<Category>? Categorys;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Categorys = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategorysEndpoint}");
    }

    async Task Delete(int CategoryId)
    {
        if (Categorys != null)
        {
            var Category = Categorys.First(q => q.Id == CategoryId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Category.Id}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.CategorysEndpoint}/{CategoryId}");
                await OnInitializedAsync();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#categorysTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#categorysTable");
    }
}

