
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="fixed">
    <div class="header">
        <div class="header_left">
        </div>
        <div class="header_center">
            Welcome to Swaperoo
        </div>
        <div class="header_right">
            <AuthorizeView>
                <NotAuthorized>
                    <button class="header_buttons" type="button" @onclick="GotoLogin">Sell on Swaperoo</button>
                    <button class="header_buttons" type="button" @onclick="GotoLogin">Help & Services</button>
                </NotAuthorized>
                <Authorized>
                    <button class="header_buttons" type="button" @onclick="GotoCreateListing">Sell on Swaperoo</button>
                    <button class="header_buttons" type="button" @onclick="GotoHelp">Help & Services</button>
                </Authorized>
            </AuthorizeView>
            
        </div>
    </div>

    <div class="option">
        <div class="option_left">
            <img class="category_icon" src="images/category.png" @onclick="ToggleSlideBox" />
            <button class="Swaperoo" @onclick="index">Swaperoo</button>
        </div>
        <div class="option_center">
            <SearchBar OnSearch="HandleSearch" />
        </div>

        <div class="option_right">
            <AuthorizeView>
                <NotAuthorized>
                    <button class="LoginButton" @onclick="GotoLogin">Login</button>
                    <button class="RegisterButton" @onclick="GotoRegister">Register</button>
                </NotAuthorized>
                <Authorized>
                    <p class="user-name">@context.User.Identity.Name</p>
                    <div class="profile-picture-container">
                        <img class="profile-picture" src="@userpfp" />
                        <div class="option-box">
                            <div>
                                <button class="option_box_button" @onclick="GotoProfile">My Profile</button>
                            </div>
                            <div>
                                <button class="option_box_button" @onclick="GotoChat">My Chats</button>
                            </div>
                            <div>
                                <button class="option_box_button" @onclick="Logout">Logout</button>
                            </div>
                            @if (userrole == "Admin")
                            {
                                <div>
                                    <button class="option_box_button" @onclick="GotoAdminMenu">Admin</button>
                                </div>
                            }
                            else
                            {
                                Console.WriteLine("Not An Admin");
                            }

                        </div>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
    <div id="slideBox" class="slide-box" style="left: @slidebox">
        <!-- Add category and subCategory filter options within the sliding box content -->
        <div class="slide-content">
            <label for="category">Category:</label>
            <select id="category" @bind="selectedCategory">
                @if (Categorys != null)
                {
                    @foreach (var category in Categorys)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                }
            </select>

            <label for="subCategory">SubCategory:</label>
            <select id="subCategory" @bind="selectedSubCategory">
                @if (SubCategorys != null)
                {
                    @foreach (var subCategory in SubCategorys)
                    {
                        <option value="@subCategory.Id">@subCategory.Name</option>
                    }
                }
            </select>
            <label for="status">Status:</label>
            <select id="status" @bind="selectedStatus">
                <option value="Sold">Sold</option>
                <option value="Ongoing">Ongoing</option>
            </select>
            <button @onclick="FilterProducts">Filter Products</button>
        </div>
    </div>
</div>


@code {
    private string? searchTerm;

    private List<User>? users;

    private string userpfp;
    private string username;
    public int userId;
    private string userrole;


    private string selectedCategory;
    private string selectedSubCategory;
    private string selectedStatus;

    private IList<Category>? Categorys;
    private IList<SubCategory>? SubCategorys;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch categories and subcategories
            Categorys = await _client.GetFromJsonAsync<List<Category>>(Endpoints.CategorysEndpoint);
            SubCategorys = await _client.GetFromJsonAsync<List<SubCategory>>(Endpoints.SubCategorysEndpoint);

            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authenticationState.User.Identity.IsAuthenticated)
            {

                users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");


                var user = authenticationState.User;

                Console.WriteLine($"Username: {user.Identity.Name}");
                // Get the userId from the user's identity
                username = user.Identity.Name;
                if (users != null)
                {
                    @foreach (var i in users)
                    {
                        if (i.Email == username)
                        {
                            userpfp = i.profilepicture;
                            userId = i.Id;
                            userrole = i.Role;
                            Console.WriteLine($"UserId: {userId}");
                            break;
                        }
                        else
                        {
                            Console.WriteLine("no userid found");
                        }

                    }

                }
                else
                {
                    Console.WriteLine("User not found");
                }

            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            // Handle exception if necessary
            Console.WriteLine($"AccessTokenNotAvailableException: {ex.Message}");
        }
    }



    public void index() { Navigation.NavigateTo("/"); }
    public void GotoRegister() { Navigation.NavigateTo("authentication/register"); }
    public void GotoLogin() { Navigation.NavigateToLogin("authentication/login"); }
    public void Logout() { Navigation.NavigateToLogout("authentication/logout", "/"); }
    public void GotoCreateListing() { Navigation.NavigateTo("/CreateListing"); }
    public void GotoProfile() { Navigation.NavigateTo($"/profile/{userId}"); }
    public void GotoChat() { Navigation.NavigateTo("/Chat"); }
    public void GotoAdminMenu() { Navigation.NavigateTo("/users"); }
    public void GotoHelp() { Navigation.NavigateTo("/help"); }

    private void HandleSearch(string term)
    {
        searchTerm = string.IsNullOrEmpty(term) ? string.Empty : term;

        // Navigate to the search page only if the search term is not empty
        if (!string.IsNullOrEmpty(searchTerm))
        {
            Navigation.NavigateTo($"/Search/{Uri.EscapeDataString(searchTerm)}");
        }
    }

    private bool isSlideBoxVisible = false;
    private string slidebox = "-250"; // Adjust the initial position based on your design

    private void ToggleSlideBox()
    {
        isSlideBoxVisible = !isSlideBoxVisible;

        if (!isSlideBoxVisible)
        {
            // Reset filters when sliding box is closed
            selectedCategory = null;
            selectedSubCategory = null;
            selectedStatus = null;
        }

        slidebox = isSlideBoxVisible ? "0px" : "-250px";
    }

    private void FilterProducts()
    {
        if (!string.IsNullOrEmpty(selectedCategory) && selectedCategory != "All Category")
        {
            // Navigate to the category page with the selected category
            Navigation.NavigateTo($"/categories/{Uri.EscapeDataString(selectedCategory)}");
        }
        else if (!string.IsNullOrEmpty(selectedSubCategory) && selectedSubCategory != "All SubCategorys")
        {
            // Navigate to the subcategory page with the selected subcategory
            Navigation.NavigateTo($"/subcategories/{Uri.EscapeDataString(selectedSubCategory)}");
        }
        else if (!string.IsNullOrEmpty(selectedStatus) && selectedStatus != "All Status")
        {
            // Navigate to the status page with the selected status
            Navigation.NavigateTo($"/status/{Uri.EscapeDataString(selectedStatus)}");
        }
        
    }
}
