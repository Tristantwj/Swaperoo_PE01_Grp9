@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="fixed">
    <div class="header">
        <div class="header_left">
        </div>
        <div class="header_center">
            Welcome to Swaperoo
        </div>
        <div class="header_right">
            <AuthorizeView>
                <NotAuthorized>
                    <button class="header_buttons" type="button" @onclick="GotoLogin">Sell on Swaperoo</button>
                    <button class="header_buttons" type="button" @onclick="GotoLogin">Help & Services</button>
                </NotAuthorized>
                <Authorized>
                    <button class="header_buttons" type="button" @onclick="GotoCreateListing">Sell on Swaperoo</button>
                    <button class="header_buttons" type="button">Help & Services</button>
                </Authorized>
            </AuthorizeView>
            
        </div>
    </div>

    <div class="option">
        <div class="option_left">
            <img class="category_icon" src="images/category.png" @onclick="ToggleSlideBox" />
            <button class="Swaperoo" @onclick="index">Swaperoo</button>
        </div>
        <div class="option_center">
            <SearchBar OnSearch="HandleSearch" />
        </div>

        <div class="option_right">
            <AuthorizeView>
                <NotAuthorized>
                    <button class="LoginButton" @onclick="GotoLogin">Login</button>
                    <button class="RegisterButton" @onclick="GotoRegister">Register</button>
                </NotAuthorized>
                <Authorized>
                    <p class="user-name">@context.User.Identity.Name</p>
                    <div class="profile-picture-container">
                        <img class="profile-picture" src="@userpfp" />
                        <div class="option-box">
                            <div>
                                <button class="option_box_button" @onclick="GotoProfile">My Profile</button>
                            </div>
                            <div>
                                <button class="option_box_button" @onclick="GotoChat">My Chats</button>
                            </div>
                            <div>
                                <button class="option_box_button" @onclick="Logout">Logout</button>
                            </div>
                            @if (userrole == "Admin")
                            {
                                <div>
                                    <button class="option_box_button" @onclick="GotoAdminMenu">Admin</button>
                                </div>
                            }
                            else
                            {
                                Console.WriteLine("Not An Admin");
                            }

                        </div>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
    <div id="slideBox" class="slide-box" style="left: @slidebox">
        <div class="slide-content">
            <!-- Your sliding box content goes here -->
            <!-- Example: -->
            <p>This is the sliding box content.</p>
        </div>
    </div>
</div>


@code {
    private string? searchTerm;

    private List<User>? users;

    private string userpfp;
    private string username;
    public int userId;
    private string userrole;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authenticationState.User.Identity.IsAuthenticated)
        {

            users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");


            var user = authenticationState.User;

            Console.WriteLine($"Username: {user.Identity.Name}");
            // Get the userId from the user's identity
            username = user.Identity.Name;
            if (users != null)
            {
                @foreach (var i in users)
                {
                    if (i.Email == username)
                    {
                        userpfp = i.profilepicture;
                        userId = i.Id;
                        userrole = i.Role;
                        Console.WriteLine($"UserId: {userId}");
                        break;
                    }
                    else
                    {
                        Console.WriteLine("no userid found");
                    }
                    
                }

            }
            else
            {
                Console.WriteLine("User not found");
            }
            
        }
    }
    public void index() { Navigation.NavigateTo("/"); }
    public void GotoRegister() { Navigation.NavigateTo("authentication/register"); }
    public void GotoLogin() { Navigation.NavigateToLogin("authentication/login"); }
    public void Logout() { Navigation.NavigateToLogout("authentication/logout", "/"); }
    public void GotoCreateListing() { Navigation.NavigateTo("/CreateListing"); }
    public void GotoProfile() { Navigation.NavigateTo($"/profile/{userId}"); }
    public void GotoChat() { Navigation.NavigateTo("/Chat"); }
    public void GotoAdminMenu() { Navigation.NavigateTo("/users"); }

    private void HandleSearch(string term)
    {
        searchTerm = string.IsNullOrEmpty(term) ? string.Empty : term;

        // Navigate to the search page only if the search term is not empty
        if (!string.IsNullOrEmpty(searchTerm))
        {
            Navigation.NavigateTo($"/Search/{Uri.EscapeDataString(searchTerm)}");
        }
    }

    private bool isSlideBoxVisible = false;
    private string slidebox = "-250"; // Adjust the initial position based on your design

    private void ToggleSlideBox()
    {
        isSlideBoxVisible = !isSlideBoxVisible;
        slidebox = isSlideBoxVisible ? "0px" : "-250px"; // Adjust the distance for the sliding effect
    }
}
